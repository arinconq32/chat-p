import faiss
import unicodedata
import numpy as np
from sentence_transformers import SentenceTransformer

# 1. Normalizador para quitar tildes y pasar a min√∫sculas
def normalizar(texto):
    texto = texto.lower().strip()
    texto = ''.join(c for c in unicodedata.normalize('NFD', texto)
                    if unicodedata.category(c) != 'Mn')
    return texto

# 2. Preguntas frecuentes con variantes agrupadas
faq_raw = {
    "¬øcu√°nto cuesta el env√≠o?|¬øcu√°l es el valor del env√≠o?|precio del env√≠o": "El env√≠o cuesta $10.000 a todo el pa√≠s.",
    "¬øtienen devoluciones?|¬øpuedo devolver un producto?|¬øc√≥mo funciona la devoluci√≥n?": "S√≠, puedes devolver productos dentro de los 7 d√≠as.",
    "¬øcu√°les son los m√©todos de pago?|¬øc√≥mo puedo pagar?|formas de pago disponibles": "Aceptamos tarjetas, transferencias y pagos contraentrega.",
    
    # Preguntas por categor√≠a
    "¬øtienen cuadernos o libretas kawaii?": (
        "- Cuaderno kawaii de tapa dura: $9.000\n"
        "- Libreta mini con forma de gatito: $6.000\n"
        "- Planificador semanal kawaii: $7.000"
    ),
    
    "¬øqu√© bol√≠grafos o l√°pices kawaii tienen?": (
        "- Bol√≠grafo gel con dise√±o de helado: $3.500\n"
        "- L√°piz con pomp√≥n o dise√±o cute: $2.500\n"
        "- Marcador doble punta pastel (unidad): $2.800"
    ),
    
    "¬øqu√© accesorios de oficina kawaii ofrecen?": (
        "- Estuche con dise√±o de animalitos: $15.000\n"
        "- Cartuchera transparente con glitter: $13.000\n"
        "- Sacapuntas con dise√±o de oso: $2.000\n"
        "- Tijeras peque√±as con orejitas: $5.000\n"
        "- Porta notas acr√≠lico con dise√±o: $6.500"
    ),
    
    "¬øtienen stickers o washi tape kawaii?": (
        "- Pegatinas decorativas (hoja): $2.000\n"
        "- Stickers 3D kawaii (set): $4.500\n"
        "- Washi tape decorativo (rollo): $3.000"
    ),
    
    "¬øcu√°les son los productos m√°s vendidos?": (
        "- Cuaderno kawaii de tapa dura: $9.000\n"
        "- Estuche con dise√±o de animalitos: $15.000\n"
        "- Bol√≠grafo gel con dise√±o de helado: $3.500\n"
        "- Stickers 3D kawaii (set): $4.500\n"
        "- Planificador semanal kawaii: $7.000"
    ),
    
    # Nuevas entradas para "agendas" o "planificadores"
    "¬øtienen agendas kawaii?": (
        "- Planificador mensual kawaii: $8.000\n"
        "- Agenda 2025 con dise√±o de gatitos: $10.000\n"
        "- Agenda con separadores y stickers: $9.500"
    ),
    "¬øtienen planificadores kawaii?": (
        "- Planificador semanal kawaii: $7.000\n"
        "- Planificador diario con dise√±o de unicornio: $6.500\n"
        "- Planificador de bolsillo con ilustraciones: $5.500"
    )
}


# 3. Separar y vectorizar todas las variantes de preguntas
preguntas = []
respuestas = []

for grupo, respuesta in faq_raw.items():
    for pregunta in grupo.split("|"):
        preguntas.append(normalizar(pregunta))
        respuestas.append(respuesta)

# Guardamos tambi√©n las preguntas originales para sugerencias
preguntas_originales = preguntas.copy()

# 4. Cargar el modelo de embeddings
modelo = SentenceTransformer("all-MiniLM-L6-v2")
vectores = modelo.encode(preguntas, convert_to_numpy=True)

# 5. Crear √≠ndice FAISS
dimension = vectores.shape[1]
index = faiss.IndexFlatL2(dimension)
index.add(vectores)

# 6. Funci√≥n del chatbot
def responder(pregunta_usuario):
    pregunta_norm = normalizar(pregunta_usuario)
    vector_pregunta = modelo.encode([pregunta_norm], convert_to_numpy=True)

    # Buscar las 3 m√°s cercanas
    distancias, indices = index.search(vector_pregunta, k=3)
    mejor_distancia = distancias[0][0]

    if mejor_distancia < 0.5:  # Umbral ajustable
        return respuestas[indices[0][0]]
    else:
        sugerencias = [preguntas_originales[i] for i in indices[0]]
        mensaje_sugerencias = "\nTal vez quisiste decir:\n- " + "\n- ".join(sugerencias)
        return f"Lo siento, no tengo una respuesta clara para eso.{mensaje_sugerencias}"

# 7. Loop de conversaci√≥n
if __name__ == "__main__":
    print("üõçÔ∏è Chatbot de tienda listo. Escribe 'salir' para terminar.")
    while True:
        user_input = input("\nCliente: ")
        if user_input.lower().strip() in ["salir", "exit"]:
            print("Bot: ¬°Gracias por visitar nuestra tienda!")
            break
        respuesta = responder(user_input)
        print("Bot:", respuesta)
